src/
‚îú‚îÄ‚îÄ assets/          # –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
‚îÇ   ‚îî‚îÄ‚îÄ vue.svg
‚îú‚îÄ‚îÄ components/      # –û–±—â–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
‚îÇ   ‚îú‚îÄ‚îÄ layout/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ TabsLayout.vue
‚îÇ   ‚îú‚îÄ‚îÄ ui/          # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ AccordionSearch.vue
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ BtnSearch.vue
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ CardSearch.vue
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ InputSearch.vue
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ RaportTable.vue
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ SelectSearch.vue
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ TextSearch.vue
‚îÇ   ‚îî‚îÄ‚îÄ task/
‚îÇ       ‚îú‚îÄ‚îÄ TaskForm.vue
‚îÇ       ‚îú‚îÄ‚îÄ TaskList.vue
‚îÇ       ‚îî‚îÄ‚îÄ TaskReport.vue
‚îú‚îÄ‚îÄ composables/     # –õ–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
‚îÇ   ‚îî‚îÄ‚îÄ useTabs.js
‚îú‚îÄ‚îÄ views/           # –°—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
‚îÇ   ‚îú‚îÄ‚îÄ HomeView.vue
‚îÇ   ‚îî‚îÄ‚îÄ TaskManagerView.vue
‚îú‚îÄ‚îÄ router/          # –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è
‚îÇ   ‚îî‚îÄ‚îÄ index.js
‚îú‚îÄ‚îÄ App.vue          # –ö–æ—Ä–Ω–µ–≤–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
‚îî‚îÄ‚îÄ main.js          # –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞






<script setup>
import { ref, onMounted } from "vue";

const telegramUser = ref(null);

async function saveUserDataToServer(userData) {
  try {
    const response = await 
    fetch("http://localhost:3082/api/users/save", {
  method: "POST",
  headers: {
    "Content-Type": "application/json",
  },
  body: JSON.stringify(userData),
})
  .then((response) => response.json())
  .then((data) => {
    if (data.success) {
      console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω:", data.user);
    } else {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", data.error);
    }
  })
  .catch((error) => console.error("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:", error));
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä:", error);
  }
} 

onMounted(() => {
  const urlParams = new URLSearchParams(window.location.search);
  const tgWebAppData = urlParams.get("tgWebAppData");

  if (tgWebAppData) {
    try {
      const userData = JSON.parse(decodeURIComponent(tgWebAppData));
      console.log("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ tgWebAppData:", userData);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
      localStorage.setItem("telegram_user", JSON.stringify(userData));
      telegramUser.value = userData;

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
      saveUserDataToServer(userData);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ tgWebAppData:", error);
    }
  } else {
    const localData = localStorage.getItem("telegram_user");
    if (localData) {
      try {
        telegramUser.value = JSON.parse(localData);
        console.log("–î–∞–Ω–Ω—ã–µ –∏–∑ localStorage:", telegramUser.value);
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ localStorage:", error);
        localStorage.removeItem("telegram_user");
      }
    } else {
      console.warn("tgWebAppData –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∏ localStorage –ø—É—Å—Ç–æ–π.");
    }
  }
});
</script>

<template>
  <div class="app-container" v-auto-animate>
    <h1 class="text-xl font-bold text-center my-4">
      <span v-if="telegramUser">
         <span class="text-lg font-normal">üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ </span>
         Task Manager
       <span class="block">  {{ telegramUser.first_name }} üöÄ </span>
      </span>
      <span v-else> –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ —á–µ—Ä–µ–∑ Telegram –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é.</span> 
    </h1>
    <RouterView />
  </div>
</template>

<style scoped>
.app-container {
  max-width: 800px;
  margin: 0 auto;
}
</style>





<script setup>
import { ref, onMounted } from "vue";

const telegramUser = ref(null); // –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const serverResponse = ref(null); // –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
const userNotFound = ref(false); // –§–ª–∞–≥ "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
const errorDetails = ref(null); // –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏
const telegramIdType = ref(""); // –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö telegramId
const telegramIdValue = ref(""); // –ó–Ω–∞—á–µ–Ω–∏–µ telegramId
const serverRequestDetails = ref(null); // –î–µ—Ç–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–∞
const isLoading = ref(true); // –§–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö

async function fetchUserFromServer(telegramId) {
  telegramIdType.value = typeof telegramId;
  telegramIdValue.value = String(telegramId); // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫—É
  console.log('start',telegramIdValue.value);
  
  const requestUrl = `https://095d-176-37-193-72.ngrok-free.app/api/users/${telegramIdValue.value}`;
  serverRequestDetails.value = { url: requestUrl, telegramId: telegramIdValue.value };
  isLoading.value = true;

  try {
    const response = await fetch(requestUrl, {
      method: "GET",
      headers: {
        "Accept": "application/json",
        "ngrok-skip-browser-warning": "true", // –£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è ngrok
      },
    });

    // –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log(`HTTP ${response.status}: ${response.statusText}`);

    serverResponse.value = {
      status: response.status,
      statusText: response.statusText,
      requestUrl,
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
    if (!response.ok) {
      throw new Error(`HTTP –æ—à–∏–±–∫–∞: ${response.status} ${response.statusText}`);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    const contentType = response.headers.get("content-type");
    if (!contentType || !contentType.includes("application/json")) {
      throw new Error("–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è JSON");
    }

    // –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
    const data = await response.json();
    serverResponse.value.data = data;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
    if (data.success) {
      telegramUser.value = data.user; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    } else {
      userNotFound.value = true;
      errorDetails.value = {
        message: data.message || "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω",
        telegramId: telegramIdValue.value,
      };
    }
  } catch (error) {
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏
    userNotFound.value = true;
    errorDetails.value = {
      message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ —Å–µ—Ä–≤–µ—Ä—É",
      details: error.message,
      telegramId: telegramIdValue.value,
      requestUrl,
    };
    console.error("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:", error);
  } finally {
    // –£–±–∏—Ä–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
    isLoading.value = false;
  }
}
onMounted(() => {
  const urlParams = new URLSearchParams(window.location.search);
  const tgWebAppData = urlParams.get("tgWebAppData");
  console.log('onMounted',telegramIdValue.value);
  
  if (tgWebAppData) {
    try {
      const userData = JSON.parse(decodeURIComponent(tgWebAppData));
      if (!userData.id) {
        throw new Error("Telegram ID –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –¥–∞–Ω–Ω—ã—Ö");
      }

      serverResponse.value = { telegramData: userData }; // –î–∞–Ω–Ω—ã–µ Telegram
      fetchUserFromServer(userData.id); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    } catch (error) {
      userNotFound.value = true;
      errorDetails.value = {
        message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ tgWebAppData",
        details: error.message,
      };
      isLoading.value = false;
    }
  } else {
    userNotFound.value = true;
    errorDetails.value = { message: "tgWebAppData –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ URL" };
    isLoading.value = false;
  }
});
</script>

<template>
  <div class="app-container" v-auto-animate>
    <!-- –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω -->
    <h1 class="text-xl font-bold text-center my-4">
      <span v-if="telegramUser">
        <span class="text-lg font-normal">üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ </span>
        Task Manager
        <span class="block"> {{ telegramUser.first_name }} üöÄ </span>
      </span>
      
      <!-- –°–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω -->
      <span v-else>
        –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ —á–µ—Ä–µ–∑ Telegram –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é.
      </span>
    </h1>
    
    <!-- –í—ã–≤–æ–¥ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–æ—É—Ç–æ–≤ -->
    <RouterView />
  </div>
</template>

<style scoped>
.app-container {
  max-width: 800px;
  margin: 0 auto;
}
</style>














//formStore
import { defineStore } from "pinia";
import { createTask, fetchTasks, fetchTaskLogs } from "../services/apiService";

export const useFormStore = defineStore("form", {
  state: () => ({
    formData: {
      url: "",
      content: "",
      interval: "",
      frequency: 1,
      period: "–ß–∞—Å",
      userId: null,
    },
    tasks: [], // –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
    taskLogs: {}, // –õ–æ–≥–∏ –∑–∞–¥–∞—á
    selectedTask: null, // –í—ã–±—Ä–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞
    notification: {
      isVisible: false,
      type: "success",
    },
    isSubmitting: false, // –§–ª–∞–≥ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
    isLoading: false, // –§–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á
    error: null, // –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  }),
  actions: {
    calculateInterval() {
      const periodMap = {
        –ß–∞—Å: 60,
        –î–µ–Ω—å: 1440,
        –ù–µ–¥–µ–ª—è: 10080,
        –ú–µ—Å—è—Ü: 43200,
      };

      if (!this.formData.frequency || !periodMap[this.formData.period]) {
        console.error("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞:", this.formData);
        return "0m"; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      }

      const totalMinutes =
        periodMap[this.formData.period] / this.formData.frequency;
      const interval = `${Math.round(totalMinutes)}m`;
      console.log("–†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª:", interval);
      return interval;
    },
    async submitForm() {
      if (this.isSubmitting) {
        console.warn("–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞—á–∏");
        return;
      }
      this.isSubmitting = true;

      try {
        console.log("–§–æ—Ä–º–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è...");

        // –ü–æ–ª—É—á–∞–µ–º Telegram –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage
        const telegramUser = JSON.parse(localStorage.getItem("telegram_user"));

        if (!telegramUser?.telegram_id) {
          throw new Error(
            "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å telegram_id –∏–∑ localStorage"
          );
        }

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º telegram_id –∫–∞–∫ userId
        this.formData.userId = telegramUser.telegram_id; // –ò—Å–ø–æ–ª—å–∑—É–µ–º telegram_id

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
        this.formData.interval = this.calculateInterval();

        // –û–±—Ä–µ–∑–∞–µ–º name –¥–æ —Ç—Ä–µ—Ç—å–µ–≥–æ —Å–ª—ç—à–∞
        const parsedUrl = new URL(this.formData.url);
        const trimmedName = `${parsedUrl.protocol}//${parsedUrl.host}/`; // –§–æ—Ä–º–∏—Ä—É–µ–º –Ω—É–∂–Ω—É—é —á–∞—Å—Ç—å
        console.log("–û–±—Ä–µ–∑–∞–Ω–Ω–æ–µ –∏–º—è:", trimmedName);

        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        const cleanFormData = {
          ...this.formData, // –ö–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã
          userId: telegramUser.telegram_id, // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ ID –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
          name: trimmedName, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—Ä–µ–∑–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        };

        console.log("–ß–∏—Å—Ç—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:", cleanFormData);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
        const response = await createTask(cleanFormData);

        console.log("–û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", response);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏
        this.notification.isVisible = true;
        this.notification.type = "success";

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
        await this.loadTasks();
      } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏:", error);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        this.notification.isVisible = true;
        this.notification.type = "error";
      } finally {
        this.isSubmitting = false;

        // –°–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => {
          this.notification.isVisible = false;
        }, 3000);
      }
    },
    async loadTasks() {
      this.isLoading = true;
      this.error = null;

      try {
        const data = await fetchTasks();

        if (!Array.isArray(data)) {
          throw new Error("–°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ, –Ω–µ —è–≤–ª—è—é—â–∏–µ—Å—è –º–∞—Å—Å–∏–≤–æ–º");
        }

        this.tasks = data.map((task) => ({
          ...task,
          created_at: task.created_at
            ? new Date(task.created_at).toLocaleString()
            : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
        }));

        this.selectedTask = this.tasks.length > 0 ? this.tasks[0] : null;
        console.log("–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:", this.tasks);
      } catch (error) {
        if (
          error.message ===
          "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á. –í–∞–º –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –≤ –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –∏ —Å–æ–∑–¥–∞—Ç—å."
        ) {
          console.warn(error.message);
          this.tasks = [];
        } else {
          this.error = error.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞—á";
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞—á:", error);
        }
      } finally {
        this.isLoading = false;
      }
    },
    selectTask(task) {
      this.selectedTask = task;
    },
    async loadTaskLogs(taskId) {
      if (this.taskLogs[taskId]) {
        console.log(`–õ–æ–≥–∏ –¥–ª—è –∑–∞–¥–∞—á–∏ ${taskId} —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.`);
        return; // –ò–∑–±–µ–≥–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
      }
      try {
        const logs = await fetchTaskLogs(taskId);
        console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –ª–æ–≥–∏ –¥–ª—è –∑–∞–¥–∞—á–∏ ${taskId}:`, logs);

        this.taskLogs[taskId] = logs;
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–æ–≥–æ–≤ –∑–∞–¥–∞—á–∏ ${taskId}:`, error);
      }
    },
  },
});

